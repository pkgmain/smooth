package {{.Singular}}

import (
	"net/http"
	"time"

	"github.com/gobuffalo/pop"
	"github.com/gobuffalo/uuid"
	"github.com/gobuffalo/validate"
	"github.com/pkgmain/smooth/paging"
)

type {{.Capitalized}} struct {
	ID        uuid.UUID `json:"id" db:"id"`
	CreatedAt time.Time `json:"createdAt" db:"created_at"`
	UpdatedAt time.Time `json:"updatedAt" db:"updated_at"`
}

func ({{.FirstLetter}} {{.Capitalized}}) Bind(r *http.Request) error {
	return nil
}

func ({{.FirstLetter}} {{.Capitalized}}) Validate(tx *pop.Connection) (*validate.Errors, error) {
	return validate.NewErrors(), nil
}

type {{.CapitalizedPlural}} []{{.Capitalized}}

func ({{.FirstLetter}} {{.CapitalizedPlural}}) ToPage(paginator *pop.Paginator) *paging.Page {
	content := make([]interface{}, len({{.FirstLetter}}))
	for i, v := range {{.FirstLetter}} {
		content[i] = v
	}

	return paging.NewPage(paginator, content)
}
